generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  login String
  password String /// @encrypted

  avatar String?

  totpEnabled Boolean @default(false)
  totpSecret String?

  tokens Token[]

  createdRooms Room[] @relation(name: "createdRooms")
  jeopardyPacks JeopardyPack[]

  jeopardyUsersOnRooms JeopardyUsersOnRooms[]

  medias Media[]
}

enum TokenType {
  access
  refresh
  totp
}

model Token {
  id Int @id @default(autoincrement())
  token String
  type TokenType
  expiresAt DateTime
  revokedAt DateTime?

  userId Int
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum RoomType {
  sixMinds
  jeopardy
}

enum RoomStatus {
  new
  inProgress
  finished
}

model Room {
  id Int @id @default(autoincrement())
  slug String @unique
  type RoomType

  creatorId Int?
  creator User? @relation(fields: [creatorId], references: [id], onDelete: SetNull, name: "createdRooms")

  createdAt DateTime @default(now())
  finishedAt DateTime?

  title String

  password String? ///@encrypted
  private Boolean @default(false)

  status RoomStatus @default(new)

  jeopardyConfigId Int?
  jeopardyConfig JeopardyConfig? @relation(fields: [jeopardyConfigId], references: [id], onDelete: SetNull)

  jeopardyUsersOnRooms JeopardyUsersOnRooms[]
}

enum JeopardyRole {
  showman
  player
}

model JeopardyUsersOnRooms {
  roomId Int
  room Room @relation(fields: [roomId], references: [id], onDelete: Cascade)

  userId Int
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  joinedAt DateTime @default(now())

  role JeopardyRole

  points Int

  @@unique([userId, roomId])
}

enum JeopardyAnswerType {
  voice
  text
}

model JeopardyConfig {
  id Int @id @default(autoincrement())

  room Room[]

  packId Int?
  pack JeopardyPack? @relation(fields: [packId], references: [id], onDelete: SetNull)

  maxPlayers Int
  answerType JeopardyAnswerType @default(voice)
  partialText Boolean
  falseStarts Boolean @default(false)
  previewAnswers Boolean
  stepByStep Boolean @default(true)
  appellations Boolean @default(false)
  noPenalty Boolean @default(false)
  awaitSync Boolean @default(true)
  preloadMedia Boolean @default(true)
  readingSpeed Int @default(20)

  choosingQuestionTime Int @default(30)
  thinkingOnQuestionTime Int @default(5)
  answerTime Int @default(25)
  givingSecretQuestionTime Int @default(30)
  makingStakeTime Int @default(30)
  thinkingOnStakeQuestionTime Int @default(30)
  printingAnswerTime Int @default(2)
  roundTime Int @default(660)
  choosingFinalCategoryTime Int @default(30)
  thinkingOnFinalQuestionTime Int @default(45)
  answerValidationTime Int @default(30)
  mediaPauseTime Int @default(0)
  falseStartTime Int @default(3)
}

model JeopardyPack {
  id Int @id @default(autoincrement())

  name String

  creatorId Int?
  creator User? @relation(fields: [creatorId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())

  difficulty Int

  private Boolean @default(false)

  configs JeopardyConfig[]
  rounds JeopardyPackRound[]
}

enum JeopardyPackRoundType {
  normal
  final
}

model JeopardyPackRound {
  id Int @id @default(autoincrement())

  name String
  type JeopardyPackRoundType

  packId Int
  pack JeopardyPack @relation(fields: [packId], references: [id], onDelete: Cascade)

  order Int @default(0)

  topics JeopardyPackTopic[]
}

model JeopardyPackTopic {
  id Int @id @default(autoincrement())

  topic String

  roundId Int
  round JeopardyPackRound @relation(fields: [roundId], references: [id], onDelete: Cascade)

  questions JeopardyPackQuestion[]
}

enum JeopardyPackQuestionType {
  normal
  stake
  secret
  commonSecret
  noRisk
}

enum JeopardyQuestionSecretCostRevealType {
  before
  after
  never
}

enum JeopardyQuestionSecretCostType {
  fixed
  minMax
  roundMinMax
}

model JeopardyPackQuestion {
  id Int @id @default(autoincrement())

  topicId Int
  topic JeopardyPackTopic @relation(fields: [topicId], references: [id], onDelete: Cascade)

  text String?

  order Int @default(0)
  cost Int

  type JeopardyPackQuestionType @default(normal)

  hint String?

  secretTopic String?
  secretCost Int?

  selfSecret Boolean @default(false)
  commonSecretCostReveal JeopardyQuestionSecretCostRevealType @default(before)

  secretMinMaxCost Int[]

  answers String[]

  mediasOnQuestion MediasOnJeopardyPackQuestions[]
}

model MediasOnJeopardyPackQuestions {
  questionId Int
  question JeopardyPackQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)

  mediaId Int
  media Media @relation(fields: [mediaId], references: [id], onDelete: Cascade)

  from Float?
  to Float?

  @@unique([questionId, mediaId])
}

enum MediaType {
  audio
  video
  image
  youtubeVideo
}

model Media {
  id Int @id @default(autoincrement())

  creatorId Int?
  creator User? @relation(fields: [creatorId], references: [id], onDelete: SetNull)

  type MediaType
  src String
  preview String?

  private Boolean @default(false)

  name String

  mediasOnJeopardyQuestion MediasOnJeopardyPackQuestions[]
}
